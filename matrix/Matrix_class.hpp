
#ifndef Matrix_class_hpp
#define Matrix_class_hpp

#include <stdio.h>
#include <iostream>
#include <vector>
using std::vector;

class Matrix{
private:
    int _rows,_cols;
public:
    vector<vector<int> > arr;
    
/// конструктор по умолчанию, который создаёт матрицу с нулём строк и нулём столбцов
    Matrix();

///    конструктор от двух целочисленных параметров:
///    num_rows и num_cols, — которые задают количество строк и столбцов матрицы соответственно
///Если количество строк или количество столбцов, переданное в конструктор класса Matrix, оказалось отрицательным, то должно быть выброшено стандартное исключение out_of_range.
    Matrix(int rows, int cols);
    
    
    ///метод Reset, принимающий два целочисленных параметра, которые задают новое количество строк и столбцов матрицы соответственно; метод Reset меняет размеры матрицы на заданные и обнуляет все её элементы
    ///Если количество строк или количество столбцов, переданное в метод Reset, оказалось отрицательным, то должно быть выброшено стандартное исключение out_of_range.
    void Reset(int new_rows, int new_cols);
    ///константный метод At, который принимает номер строки и номер столбца (именно в этом порядке; нумерация строк и столбцов начинается с нуля) и возвращает значение в соответствущей ячейке матрицы
    int At(int atRow, int atCol) const;
    
    ///неконстантный метод At с такими же параметрами, но возвращающий ссылку на значение в соответствущей ячейке матрицы
    int &At(int atRow, int atCol);
    
    ///константный метод GetNumRows
    int GetNumRows() const;
    ///константный метод GetNumCols
    int GetNumCols() const;
    
    
    ///оператор ввода из потока istream; формат ввода простой — сначала задаётся количество строк и столбцов (именно в этом порядке), а затем все элементы матрицы: сначала элемент первой строки и первого столбца, затем элемент первой строки и второго столбца и так далее
    friend std::istream& operator>> (std::istream &in, Matrix &matrix);
    
   ///оператор вывода в поток ostream; он должен выводить матрицу в том же формате, в каком её читает оператор ввода, — в первой строке количество строк и столбцов, во второй — элементы первой строки, в третьей — элементы второй строки и т.д.
    friend std::ostream& operator<< (std::ostream &out,const Matrix &matrix);
    ///оператор проверки на равенство (==): он должен возвращать true, если сравниваемые матрицы имеют одинаковый размер и все их соответствующие элементы равны между собой, в противном случае он должен возвращать false.
    friend bool operator== (const Matrix &m1, const Matrix &m2);

    ///оператор сложения: он должен принимать две матрицы и возвращать новую матрицу, которая является их суммой; если переданные матрицы имеют разные размеры этот оператор должен выбрасывать стандартное исключение invalid_argument.
    friend const Matrix operator+(const Matrix& left, const Matrix& right);
    
    Matrix operator=(Matrix other);
};

#endif /* Matrix_class_hpp */
